name: Branch Protection Checks

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress workflows when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0
        
      - name: Build validation
        run: |
          echo "‚úÖ Build check passed"
          echo "Repository structure validated"
          echo "Configuration files present"
          
          # Check for required files
          test -f "README.md" || (echo "‚ùå README.md missing" && exit 1)
          test -f "mkdocs.yml" || (echo "‚ùå mkdocs.yml missing" && exit 1)
          
          echo "‚úÖ All required files present"

  test:
    name: Test Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0
        
      - name: Test validation
        run: |
          echo "‚úÖ Test check passed"
          echo "Future: Backend tests will run here"
          echo "Future: Frontend tests will run here"
          echo "Future: Integration tests will run here"

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0
        
      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.11'
          
      - name: Cache pip packages
        uses: actions/cache@v4.2.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-docs-${{ hashFiles('**/requirements-docs.txt') }}
          restore-keys: |
            ${{ runner.os }}-docs-
            
      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-docs.txt
          
      - name: Test documentation build
        run: |
          echo "üîç Testing documentation build..."
          mkdocs build --strict
          echo "‚úÖ Documentation builds successfully"
          
      - name: Validate documentation structure
        run: |
          echo "üîç Validating documentation structure..."
          
          # Check for required documentation files
          test -f "docs/index.md" || (echo "‚ùå docs/index.md missing" && exit 1)
          test -f "docs/getting-started/overview.md" || (echo "‚ùå Getting started docs missing" && exit 1)
          test -f "docs/business/business-concept.md" || (echo "‚ùå Business docs missing" && exit 1)
          test -f "docs/architecture/architecture.md" || (echo "‚ùå Architecture docs missing" && exit 1)
          
          echo "‚úÖ Documentation structure validated"

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0
        
      - name: Security validation
        run: |
          echo "üîí Running security checks..."
          
          # Check for sensitive files
          if find . -name "*.key" -o -name "*.pem" -o -name ".env" | grep -q .; then
            echo "‚ùå Sensitive files found in repository"
            find . -name "*.key" -o -name "*.pem" -o -name ".env"
            exit 1
          fi
          
          # Check for hardcoded secrets (basic patterns)
          if grep -r -i "password\|secret\|key\|token" --include="*.py" --include="*.js" --include="*.ts" --exclude-dir=".git" --exclude-dir="node_modules" --exclude-dir="docs" . | grep -v "# noqa" | grep -v "TODO" | grep -v "FIXME" | grep -E "(=|:)\s*['\"][^'\"]{8,}['\"]"; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found (review manually)"
            echo "If these are safe, add # noqa comment to ignore"
          fi
          
          echo "‚úÖ Basic security checks passed"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0
        
      - name: Code quality validation
        run: |
          echo "üìù Running code quality checks..."
          
          # Check for TODO comments that should be tracked
          if grep -r "TODO\|FIXME\|HACK" --include="*.py" --include="*.js" --include="*.ts" --exclude-dir=".git" .; then
            echo "üìã TODO items found - consider creating GitHub issues for these"
          fi
          
          # Check for consistent line endings
          if find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.md" | xargs file | grep -q "CRLF"; then
            echo "‚ö†Ô∏è  CRLF line endings found - consider using LF consistently"
          fi
          
          echo "‚úÖ Code quality checks completed"

  # Special job for main branch - additional production readiness checks
  production-ready:
    name: Production Readiness
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0
        
      - name: Production readiness validation
        run: |
          echo "üöÄ Checking production readiness..."
          
          # Check for deployment configuration
          test -f ".github/workflows/docs.yml" || (echo "‚ùå Documentation deployment missing" && exit 1)
          
          # Check for comprehensive documentation
          test -f "docs/getting-started/quick-start.md" || (echo "‚ùå Quick start guide missing" && exit 1)
          
          # Check for proper gitignore
          test -f ".gitignore" || (echo "‚ùå .gitignore missing" && exit 1)
          
          echo "‚úÖ Production readiness validated"

  # Job summary
  summary:
    name: Status Summary
    runs-on: ubuntu-latest
    needs: [build, test, docs, security, lint]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "## Branch Protection Status Summary"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Documentation: ${{ needs.docs.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- Code Quality: ${{ needs.lint.result }}"
          
          if [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.docs.result }}" == "failure" ]] || \
             [[ "${{ needs.security.result }}" == "failure" ]] || \
             [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "‚ùå Some checks failed - review the logs above"
            exit 1
          else
            echo "‚úÖ All branch protection checks passed!"
          fi