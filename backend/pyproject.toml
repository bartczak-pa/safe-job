[tool.poetry]
name = "safe-job-backend"
version = "0.1.0"
description = "Safe Job Platform - Django Backend API"
authors = ["Safe Job Team <dev@safejob.nl>"]
readme = "README.md"
packages = [{include = "config"}, {include = "apps"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
# Django and core dependencies
django = "^5.2.4"
djangorestframework = "^3.15.2"
django-cors-headers = "^4.4.0"
django-environ = "^0.11.2"

# Database
psycopg = {extras = ["binary", "pool"], version = "^3.2.3"}

# Redis and caching
redis = "^5.2.0"
django-redis = "^5.4.0"

# Real-time features (Django Channels)
channels = "^4.1.0"
channels-redis = "^4.2.0"

# Authentication and security
djangorestframework-simplejwt = "^5.3.0"
django-ratelimit = "^4.1.0"

# API documentation
drf-spectacular = "^0.27.2"

# File handling
pillow = "^10.4.0"
django-storages = {extras = ["s3"], version = "^1.14.4"}

# Environment and configuration
python-decouple = "^3.8"

# Production server
gunicorn = "^23.0.0"
whitenoise = "^6.8.2"

[tool.poetry.group.dev.dependencies]
# Development and debugging
django-debug-toolbar = "^4.4.6"
django-extensions = "^3.2.3"

# Testing
pytest = "^8.3.4"
pytest-django = "^4.9.0"
pytest-cov = "^6.0.0"
factory-boy = "^3.3.1"
pytest-xdist = "^3.6.0"

# Code quality
ruff = "^0.12.0"
black = "^24.10.0"
isort = "^5.13.2"
mypy = "^1.11.0"
django-stubs = {extras = ["compatible-mypy"], version = "^5.1.0"}

# Development tools
pre-commit = "^4.2.0"
ipython = "^8.29.0"

# Security scanning
safety = "^3.2.10"
bandit = "^1.7.10"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"*/migrations/*" = ["E501"]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["migrations"]

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "config.settings.development"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.test"
addopts = "--cov=apps --cov=config --cov-report=html --cov-report=term-missing --reuse-db"
testpaths = ["tests"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]

[tool.coverage.run]
source = ["apps", "config"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "manage.py",
    "*/settings/*",
    "*/wsgi.py",
    "*/asgi.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
